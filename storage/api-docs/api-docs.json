{
    "openapi": "3.0.0",
    "info": {
        "title": "Invoices API Documentation",
        "description": "API Documentation for Invoices management system",
        "contact": {
            "name": "Thiiagoms",
            "email": "thiiagoms@proton.me"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000/api/documentation",
            "description": "API Documentation Server"
        }
    ],
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user and return token",
                "description": "Authenticate user by providing their email and password. If the credentials are valid, a token is returned which can be used to authenticate subsequent requests.",
                "operationId": "8734854b20330649439af665496f2cdf",
                "requestBody": {
                    "description": "User data for login",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticateSwaggerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TokenSwaggerResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server could not process the request due to invalid input."
                    }
                }
            }
        },
        "/api/v1/expense": {
            "post": {
                "tags": [
                    "Expense"
                ],
                "summary": "Create a new expense for authenticated user",
                "description": "Create a new expense and receive the expense's data upon successful creation.",
                "operationId": "f18600a500d08e650921e5c24d318e24",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterExpenseSwaggerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Expense registered successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisteredExpenseSwaggerResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The server could not process the request due to invalid input."
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "scalar": "bearerAuth"
                    }
                ]
            }
        },
        "/api/v1/user/profile": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get authenticated user data",
                "operationId": "6d9e4efa31759a9b32bcaa6d2b1a1287",
                "responses": {
                    "200": {
                        "description": "User was found and returned user data successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSwaggerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication error or unauthorized error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "object",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "scalar": "bearerAuth"
                    }
                ]
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Fully Update the authenticated user's information",
                "description": "Replaces the authenticated user's data with the provided information.",
                "operationId": "bcf50231a58ef07fe382f456915195e0",
                "requestBody": {
                    "description": "Complete payload to replace the authenticated user data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserSwaggerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User data successfully replaced.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserSwaggerResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Validation failed or invalid input."
                    },
                    "401": {
                        "description": "User not found."
                    }
                },
                "security": [
                    {
                        "scalar": "bearerAuth"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Partially Update the authenticated user's information",
                "description": "Allows updating one or more fields of the authenticated user profile.",
                "operationId": "fba21edbc052069a429c857cdeb09653",
                "requestBody": {
                    "description": "Payload containing fields to Update the authenticated user.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserSwaggerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User data successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserSwaggerResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Validation failed or invalid input."
                    },
                    "401": {
                        "description": "User not found."
                    }
                },
                "security": [
                    {
                        "scalar": "bearerAuth"
                    }
                ]
            }
        },
        "/api/v1/email-confirmation": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Confirm user email",
                "description": "Confirms a user's email address using a signed URL with query parameters.",
                "operationId": "confirmUserEmail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "UUID of the user to confirm",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "expires",
                        "in": "query",
                        "description": "Expiration timestamp of the signed URL",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "signature",
                        "in": "query",
                        "description": "HMAC signature of the URL",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email confirmed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email confirmed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid/expired signature",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid or expired URL."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "id": [
                                                    "The id field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/register": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Requests a new user",
                "description": "Registers a new user and returns the created user data.",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterUserSwaggerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisteredExpenseSwaggerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication error or unauthorized error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "object",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "object",
                                            "example": "Error message about field validation error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AuthenticateSwaggerRequest": {
                "title": "Authenticate user request",
                "description": "Base request for user authentication operation.",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "description": "A valid email address.",
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "password": {
                        "description": "Password with at least one uppercase letter, one lowercase letter, one number, and one special character.",
                        "type": "string",
                        "minLength": 8,
                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d]).+$",
                        "example": "@p5sSw0rd!"
                    }
                },
                "type": "object",
                "example": {
                    "email": "john@example.com",
                    "password": "@p5sSw0rd!"
                }
            },
            "TokenSwaggerResponse": {
                "title": "Token for authenticate user request",
                "description": "Response containing authentication token",
                "properties": {
                    "token": {
                        "description": "The token for the user.",
                        "type": "string",
                        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    },
                    "token_type": {
                        "description": "The type of the token.",
                        "type": "string",
                        "example": "Bearer"
                    },
                    "expires_in": {
                        "description": "The expiration time of the token.",
                        "type": "integer",
                        "example": 3600
                    }
                },
                "type": "object"
            },
            "RegisterExpenseSwaggerRequest": {
                "title": "Register expense request for authenticated user",
                "description": "Base request for expense register operation for authenticated user.",
                "required": [
                    "amount",
                    "description"
                ],
                "properties": {
                    "amount": {
                        "description": "The amount of the expense",
                        "type": "string",
                        "minimum": 1,
                        "example": "12"
                    },
                    "description": {
                        "description": "The description of the expense.",
                        "type": "string",
                        "minLength": 3,
                        "example": "Expense description example"
                    }
                },
                "type": "object",
                "example": {
                    "amount": "12",
                    "description": "Expense description example"
                }
            },
            "RegisteredExpenseSwaggerResponse": {
                "title": "Registered expense response",
                "description": "Registered expense response.",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "The data of the created expense.",
                        "properties": {
                            "id": {
                                "title": "Id",
                                "description": "The unique identifier of the expense.",
                                "type": "string",
                                "format": "uuid"
                            },
                            "amount": {
                                "title": "Amount",
                                "description": "The value of the expense.",
                                "type": "integer",
                                "example": "122000000"
                            },
                            "description": {
                                "title": "Description",
                                "description": "The description address of the expense.",
                                "type": "string",
                                "example": "Expense example description"
                            },
                            "created_at": {
                                "title": "Created at",
                                "description": "The date and time when the user was created.",
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-06-30 12:41:15"
                            },
                            "updated_at": {
                                "title": "Updated at",
                                "description": "The date and time when the user was updated.",
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-06-30 12:41:15"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "RegisterUserSwaggerRequest": {
                "title": "Register user request",
                "description": "Base request for user register operation.",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "description": "The full name of the user.",
                        "type": "string",
                        "maxLength": 150,
                        "minLength": 3,
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "A valid email address.",
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "password": {
                        "description": "Password with at least one uppercase letter, one lowercase letter, one number, and one special character.",
                        "type": "string",
                        "minLength": 8,
                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d]).+$",
                        "example": "@p5sSw0rd!"
                    }
                },
                "type": "object",
                "example": {
                    "name": "John Doe",
                    "email": "john@example.com",
                    "password": "@p5sSw0rd!"
                }
            },
            "UpdateUserSwaggerRequest": {
                "title": "Update user data request with PUT/PATCH HTTP methods",
                "description": "Payload to partial/fully update the authenticated user data. For PUT request all fields are required.",
                "properties": {
                    "name": {
                        "description": "The full name of the user.",
                        "type": "string",
                        "maxLength": 150,
                        "minLength": 3,
                        "example": "Jane Doe"
                    },
                    "email": {
                        "description": "A valid email address.",
                        "type": "string",
                        "format": "email",
                        "example": "jane@example.com"
                    },
                    "password": {
                        "description": "Password with at least one uppercase letter, one lowercase letter, one number, and one special character.",
                        "type": "string",
                        "minLength": 8,
                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d]).+$",
                        "example": "StrongP@ss123!"
                    }
                },
                "type": "object",
                "example": {
                    "name": "Jane Doe",
                    "email": "jane@example.com",
                    "password": "StrongP@ss123!"
                }
            },
            "UpdateUserSwaggerResponse": {
                "title": "Update user response",
                "description": "Response returned after a successful user update.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the user.",
                        "type": "string",
                        "format": "uuid",
                        "example": "9f4b7aa8-124a-4c4a-95b9-6d97b7dd63c1"
                    },
                    "name": {
                        "description": "Full name of the user.",
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "email": {
                        "description": "Email address of the user.",
                        "type": "string",
                        "format": "email",
                        "example": "jane@example.com"
                    },
                    "created_at": {
                        "description": "Timestamp when the user was created.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-09-01T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the user was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-09-10T14:30:00Z"
                    }
                },
                "type": "object",
                "example": {
                    "id": "9f4b7aa8-124a-4c4a-95b9-6d97b7dd63c1",
                    "name": "Jane Doe",
                    "email": "jane@example.com",
                    "created_at": "2023-09-01T12:00:00Z",
                    "updated_at": "2023-09-10T14:30:00Z"
                }
            },
            "UserSwaggerResponse": {
                "title": "User response",
                "description": "Base response for user CRUD operations",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "The data of the created user.",
                        "properties": {
                            "id": {
                                "title": "Id",
                                "description": "The unique identifier of the user.",
                                "type": "string",
                                "format": "uuid"
                            },
                            "name": {
                                "title": "Name",
                                "description": "The name of the user.",
                                "type": "string",
                                "example": "John Doe"
                            },
                            "email": {
                                "title": "Email",
                                "description": "The email address of the user.",
                                "type": "string",
                                "format": "email",
                                "example": "johndoe@example.com"
                            },
                            "created_at": {
                                "title": "Created at",
                                "description": "The date and time when the user was created.",
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-01-01 12:00:00"
                            },
                            "updated_at": {
                                "title": "Updated at",
                                "description": "The date and time when the user was updated.",
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-01-01 12:00:00"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Expense",
            "description": "Expense"
        },
        {
            "name": "User",
            "description": "User"
        }
    ]
}